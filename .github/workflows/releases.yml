name: Releases

on: 
  push:
    tags:
    - '*'

env:
  CARGO_TERM_COLOR: always
  OCTASINE_SEMVER_VERSION: "v0.8"

jobs:
  cargo-deny:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        log-level: warn
        command: check licenses
        arguments: --all-features --workspace

  build-macos:
    runs-on: macos-11

    steps:
    - uses: actions/checkout@v3

    - name: Install latest Rust
      uses: dtolnay/rust-toolchain@stable
      with:
          targets: aarch64-apple-darwin

    - name: Setup Rust dependency caching
      uses: Swatinem/rust-cache@v2

    - name: Build plugin for x86_64
      run: cargo build --release -p octasine-vst2-plugin --verbose

    - name: Build plugin for aarch64
      run: |
        export SDKROOT=$(xcrun -sdk macosx11.1 --show-sdk-path)
        echo "SDKROOT=$SDKROOT"
        export MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.1 --show-sdk-platform-version)
        echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET"
        cargo build --release -p octasine-vst2-plugin --target=aarch64-apple-darwin
      env:
        DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
      shell: bash

    - name: Install cargo-about
      run: cargo install --debug --locked cargo-about

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash

    - name: Create release files
      run: |
        mkdir releases
        mkdir -p tmp
        lipo "./target/release/liboctasine.dylib" "./target/aarch64-apple-darwin/release/liboctasine.dylib" -output "./tmp/liboctasine.dylib" -create
        bash ./scripts/macos/bundle.sh "./tmp/liboctasine.dylib" "OctaSine $OCTASINE_SEMVER_VERSION"
        bash ./scripts/unix/package.sh "OctaSine $OCTASINE_SEMVER_VERSION.vst" "../releases/OctaSine-${{ steps.get_version.outputs.VERSION }}-macOS"

    - uses: ncipollo/release-action@v1
      with:
        artifacts: "releases/*.zip"
        draft: true
        allowUpdates: true
        artifactErrorsFailBuild: true
        token: ${{ secrets.GITHUB_TOKEN }}


  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install latest Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust dependency caching
      uses: Swatinem/rust-cache@v2

    - name: Setup MSVC shell
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build plugin in release mode
      run: cargo build --release -p octasine-vst2-plugin --verbose

    - name: Install cargo-about
      run: cargo install --debug --locked cargo-about

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash
  
    - name: Create release file
      run: |
        mkdir releases
        New-Item "tmp\OctaSine" -ItemType Directory -ea 0
        Copy-Item "LICENSE" -Destination "tmp\OctaSine\LICENSE.txt"
        cargo-about generate -o "tmp\OctaSine\LICENSES.html" "about.hbs" -m "octasine-vst2-plugin\Cargo.toml" 
        $version = $env:OCTASINE_SEMVER_VERSION
        Copy-Item "target\release\octasine.dll" -Destination "tmp\OctaSine\OctaSine $version.dll"
        Compress-Archive -Path "tmp\OctaSine" -DestinationPath releases\OctaSine-${{ steps.get_version.outputs.VERSION }}-Windows.zip -CompressionLevel Optimal

    - uses: ncipollo/release-action@v1
      with:
        artifacts: "releases/*.zip"
        draft: true
        allowUpdates: true
        artifactErrorsFailBuild: true
        token: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Install baseview dependencies
      run: |
        sudo apt update
        sudo apt install libgl-dev libx11-xcb-dev libxcb1-dev libxcb-dri2-0-dev libxcb-icccm4-dev libxcursor-dev libxkbcommon-dev libxcb-shape0-dev libxcb-xfixes0-dev

    - name: Install latest Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust dependency caching
      uses: Swatinem/rust-cache@v2

    - name: Build plugin in release mode
      run: cargo build --release -p octasine-vst2-plugin --verbose

    - name: Install cargo-about
      run: cargo install --debug --locked cargo-about

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash

    - name: Create release file
      run: |
        mkdir releases
        mkdir -p tmp
        cp "./target/release/liboctasine.so" "tmp/OctaSine $OCTASINE_SEMVER_VERSION.so"
        bash ./scripts/unix/package.sh "OctaSine $OCTASINE_SEMVER_VERSION.so" "../releases/OctaSine-${{ steps.get_version.outputs.VERSION }}-Ubuntu-20_04"

    - uses: ncipollo/release-action@v1
      with:
        artifacts: "releases/*.zip"
        draft: true
        allowUpdates: true
        artifactErrorsFailBuild: true
        token: ${{ secrets.GITHUB_TOKEN }}
